SOLID is all about keeping your code clean, organized and maintainable.

SOLID Principles stands for:
Single Responsibility Principle
Open-Closed Principle
Liskov Substitution Principle
Interface Segregation Principle
Dependency Inversion Principle

1. Single Responsibility Principle
The Single Responsibility Principle (SRP) advocates that a class should have only one reason to change, meaning it
should have only one responsibility or job. This principle promotes cohesion and maintainability in codebases by
ensuring that classes are focused and not burdened with unrelated tasks.

2. Open-Closed Principle
The Open-Closed Principle (OCP) states that software entities (classes, modules, functions, etc.) should be open
for extension but closed for modification. This means that you should be able to extend the behavior of a
system without modifying its existing code. This principle promotes code stability, reusability,
and maintainability.

3. Liskov Substitution Principle
The Liskov Substitution Principle (LSP) states that objects of a superclass should be replaceable with objects of its
subclasses without affecting the correctness of the program. In simpler terms, derived classes must be substitutable
for their base classes without altering the desired behavior of the program.

4. Interface Segregation Principle
The Interface Segregation Principle (ISP) states that clients should not be forced to depend on interfaces they
do not use. In simpler terms, it suggests that interfaces should be specific to the needs of the clients, and
classes should not be forced to implement methods they do not need.

5. Dependency Inversion Principle
The Dependency Inversion Principle (DIP) states that high-level modules should not depend on low-level modules.
Instead, both should depend on abstractions. Furthermore, abstractions should not depend on details,
but details should depend on abstractions. In simpler terms, DIP encourages decoupling between modules by
introducing abstract interfaces, reducing the direct dependencies between components.